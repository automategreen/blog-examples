#!/usr/bin/env node

'use strict';

var Insteon = require('home-controller').Insteon;
var program = require('commander');
var pkg = require('../package.json');
var version = pkg.version;

program
  .version(version)
  .usage('[options] <host:port> <device>')
  .option('-t, --period', 'period in milliseconds of binking [1000]', parseInt)
  .parse(process.argv);

if(program.args.length < 2) {
  return program.help();
}

var uri, host, port, device;
var period = program.period || 1000;

var idRegex = /^[0-9a-f]{2}\.?[0-9a-f]{2}\.?[0-9a-f]{2}$/i;

program.args.forEach(function(arg) {
  if(idRegex.test(arg)){
    device = arg.replace('.', '');
  } else {
    uri = arg;
    var uriParts = arg.split(':');

    host = uriParts[0];
    if(uriParts.length > 1) {
      port = parseInt(uriParts[1]);
    }
  }
});

console.log('Connecting to ' + uri);
var gw = new Insteon();

gw.on('connect', function () {
  gw.level(device, function (err, level) {
    if(level > 0) {
      blinkOff();
    } else {
      blinkOn();
    }
  });
});

gw.on('close', function() {
  console.log('Connection closed');
});

gw.connect(host, port);


function blinkOn (err) {
  if(err) {
    return gw.close();
  }
  setTimeout(function () {
    console.log('Turn On ' + device);
    gw.turnOn(device, blinkOff);
  }, period);
}

function blinkOff (err) {
  if(err) {
    return gw.close();
  }
  setTimeout(function () {
    console.log('Turn Off ' + device);
    gw.turnOff(device, blinkOn);
  }, period);
}
